.refs
$builtin
events
math
.data
0.0 0.0 0.0 0.0 0.0 0.0 0.0
.defs
field_changes::NewChangeSet.0:
load "changes" ; #field_changes(120)
mk_array 0 ; #field_changes(99)
load "showMessage" ; #field_changes(120)
mk_ref.udf field_changes::addMessageChange ; #field_changes(100)
load "changeProperty" ; #field_changes(120)
mk_ref.udf field_changes::addPropertyChange ; #field_changes(101)
load "addEntity" ; #field_changes(120)
mk_ref.udf field_changes::addNewEntityChange ; #field_changes(102)
load "addBatch" ; #field_changes(120)
mk_ref.udf field_changes::addBatchEntitiesChange ; #field_changes(103)
load "removeEntities" ; #field_changes(120)
mk_ref.udf field_changes::addRemoveEntitiesChange ; #field_changes(104)
load "moveEntity" ; #field_changes(120)
mk_ref.udf field_changes::addMoveEntityChange ; #field_changes(105)
load "changeTurn" ; #field_changes(120)
mk_ref.udf field_changes::addTurnChange ; #field_changes(106)
load "setTimeout" ; #field_changes(120)
mk_ref.udf field_changes::$lambda_1 ; #field_changes(111)
load "addDefinitions" ; #field_changes(120)
mk_ref.udf field_changes::$lambda_2 ; #field_changes(119)
mk_hash 10 ; #field_changes(120)
bind_refs ; #field_changes(120)
ret ; #field_changes(120)
field_changes::$lambda_2.3:
load #0 ; #field_changes(114)
get.index "changes" ; #field_changes(114)
load "type" ; #field_changes(118)
load "new_definitions" ; #field_changes(115)
load "template" ; #field_changes(118)
load #1 ; #field_changes(116)
load "defNames" ; #field_changes(118)
load #2 ; #field_changes(117)
mk_hash 3 ; #field_changes(118)
call.native $builtin::Add ; #field_changes(118)
ret ; #field_changes(119)
field_changes::$lambda_1.2:
load #0 ; #field_changes(110)
get.index "changes" ; #field_changes(110)
load "type" ; #field_changes(110)
load "timeout" ; #field_changes(110)
load "seconds" ; #field_changes(110)
load #1 ; #field_changes(110)
mk_hash 2 ; #field_changes(110)
call.native $builtin::Add ; #field_changes(110)
ret ; #field_changes(111)
field_changes::addTurnChange.2:
load #0 ; #field_changes(89)
get.index "changes" ; #field_changes(89)
load "type" ; #field_changes(93)
load "turn" ; #field_changes(90)
load "seatIdx" ; #field_changes(93)
load #1 ; #field_changes(91)
load "to" ; #field_changes(93)
load "*" ; #field_changes(92)
mk_hash 3 ; #field_changes(93)
call.native $builtin::Add ; #field_changes(93)
load #0 ; #field_changes(94)
ret ; #field_changes(94)
field_changes::addPropertyChange.3:
load #0 ; #field_changes(78)
get.index "changes" ; #field_changes(78)
load "type" ; #field_changes(83)
load "property" ; #field_changes(79)
load "key" ; #field_changes(83)
load #1 ; #field_changes(80)
load "value" ; #field_changes(83)
load #2 ; #field_changes(81)
load "to" ; #field_changes(83)
load "*" ; #field_changes(82)
mk_hash 4 ; #field_changes(83)
call.native $builtin::Add ; #field_changes(83)
load #0 ; #field_changes(84)
ret ; #field_changes(84)
field_changes::addMoveEntityChange.6:
load #0 ; #field_changes(65)
get.index "changes" ; #field_changes(65)
load "type" ; #field_changes(72)
load "move_entity" ; #field_changes(66)
load "entityId" ; #field_changes(72)
load #1 ; #field_changes(67)
load "targetPosition" ; #field_changes(72)
load #2 ; #field_changes(68)
load "targetRotation" ; #field_changes(72)
load #3 ; #field_changes(69)
load "targetLayout" ; #field_changes(72)
load #4 ; #field_changes(70)
load "to" ; #field_changes(72)
load #5 ; #field_changes(71)
mk_hash 6 ; #field_changes(72)
call.native $builtin::Add ; #field_changes(72)
load #0 ; #field_changes(73)
ret ; #field_changes(73)
field_changes::addRemoveEntitiesChange.3:
load #0 ; #field_changes(55)
get.index "changes" ; #field_changes(55)
load "type" ; #field_changes(59)
load "remove_entity" ; #field_changes(56)
load "entityIds" ; #field_changes(59)
load #1 ; #field_changes(57)
load "to" ; #field_changes(59)
load #2 ; #field_changes(58)
mk_hash 3 ; #field_changes(59)
call.native $builtin::Add ; #field_changes(59)
load #0 ; #field_changes(60)
ret ; #field_changes(60)
field_changes::addBatchEntitiesChange.3:
mk_array 0 ; #field_changes(32)
store 3 ; #field_changes(32)
load #1 ; #field_changes(34)
call.native _iter_create$ ; #field_changes(42)
FOR_COND_8700001:
dup ; #field_changes(42)
call.native _iter_hasnext$ ; #field_changes(42)
load.const true ; #field_changes(42)
jmpne FOR_END_8700001 ; #field_changes(42)
dup ; #field_changes(42)
call.native _iter_next$ ; #field_changes(42)
store 4 ; #field_changes(42)
load #3 ; #field_changes(35)
load "id" ; #field_changes(41)
load #4 ; #field_changes(36)
get.index "id" ; #field_changes(36)
load "name" ; #field_changes(41)
load #4 ; #field_changes(37)
get.index "name" ; #field_changes(37)
load "position" ; #field_changes(41)
load #4 ; #field_changes(38)
get.index "pos" ; #field_changes(38)
load "rotation" ; #field_changes(41)
load #4 ; #field_changes(39)
get.index "rotation" ; #field_changes(39)
load "layout" ; #field_changes(41)
load #4 ; #field_changes(40)
get.index "group" ; #field_changes(40)
mk_hash 5 ; #field_changes(41)
call.native $builtin::Add ; #field_changes(41)
jmp FOR_COND_8700001 ; #field_changes(42)
FOR_END_8700001:
unload ; #field_changes(42)
load #0 ; #field_changes(44)
get.index "changes" ; #field_changes(44)
load "type" ; #field_changes(48)
load "new_entity" ; #field_changes(45)
load "entities" ; #field_changes(48)
load #3 ; #field_changes(46)
load "to" ; #field_changes(48)
load #2 ; #field_changes(47)
mk_hash 3 ; #field_changes(48)
call.native $builtin::Add ; #field_changes(48)
load #0 ; #field_changes(50)
ret ; #field_changes(50)
field_changes::addNewEntityChange.3:
load #0 ; #field_changes(18)
get.index "changes" ; #field_changes(18)
load "type" ; #field_changes(26)
load "new_entity" ; #field_changes(19)
load "id" ; #field_changes(26)
load #1 ; #field_changes(20)
get.index "id" ; #field_changes(20)
load "name" ; #field_changes(26)
load #1 ; #field_changes(21)
get.index "name" ; #field_changes(21)
load "position" ; #field_changes(26)
load #1 ; #field_changes(22)
get.index "pos" ; #field_changes(22)
load "rotation" ; #field_changes(26)
load #1 ; #field_changes(23)
get.index "rotation" ; #field_changes(23)
load "layout" ; #field_changes(26)
load #1 ; #field_changes(24)
get.index "group" ; #field_changes(24)
load "to" ; #field_changes(26)
load #2 ; #field_changes(25)
mk_hash 7 ; #field_changes(26)
call.native $builtin::Add ; #field_changes(26)
load #0 ; #field_changes(27)
ret ; #field_changes(27)
field_changes::addMessageChange.4:
load #0 ; #field_changes(7)
get.index "changes" ; #field_changes(7)
load "type" ; #field_changes(12)
load "message" ; #field_changes(8)
load "message" ; #field_changes(12)
load #1 ; #field_changes(9)
load "duration" ; #field_changes(12)
load #2 ; #field_changes(10)
load "to" ; #field_changes(12)
load #3 ; #field_changes(11)
mk_hash 4 ; #field_changes(12)
call.native $builtin::Add ; #field_changes(12)
load #0 ; #field_changes(13)
ret ; #field_changes(13)
main::onGiveObjectToAnother.1:
call.udf field_changes::NewChangeSet ; #main(117)
store 1 ; #main(117)
load "score_" ; #main(119)
load #0 ; #main(119)
get.index "sectNumber" ; #main(119)
concat ; #main(119)
store 2 ; #main(119)
load #0 ; #main(120)
get.index "objId" ; #main(120)
load.const null ; #main(120)
load.const null ; #main(120)
load #2 ; #main(120)
load "*" ; #main(120)
load #1 ; #main(120)
get.index "moveEntity" ; #main(120)
invoke ; #main(120)
load #1 ; #main(122)
get.index "changes" ; #main(122)
ret ; #main(122)
main::onCardRequested.1:
call.udf field_changes::NewChangeSet ; #main(99)
store 1 ; #main(99)
load.global 1 ; #main(101)
get.index "players" ; #main(101)
load #0 ; #main(101)
get.index "playerIdx" ; #main(101)
get ; #main(101)
load 7.0 ; #main(101)
jmpge IF_END_1600001 ; #main(110)
load.global 1 ; #main(102)
get.index "deck" ; #main(102)
get.index "dealOne" ; #main(102)
invoke ; #main(102)
store 2 ; #main(102)
load "name" ; #main(107)
load "card" ; #main(104)
load #2 ; #main(104)
concat ; #main(104)
load "group" ; #main(107)
load "cards_" ; #main(105)
load #0 ; #main(105)
get.index "playerIdx" ; #main(105)
load 1.0 ; #main(105)
add ; #main(105)
concat ; #main(105)
load "rotation" ; #main(107)
load.const math::PI ; #main(106)
load 0.0 ; #main(106)
load 0.0 ; #main(106)
mk_array 3 ; #main(106)
mk_hash 3 ; #main(107)
load "*" ; #main(107)
load #1 ; #main(103)
get.index "addEntity" ; #main(103)
invoke ; #main(107)
load 1.0 ; #main(109)
load.global 1 ; #main(109)
get.index "players" ; #main(109)
load #0 ; #main(109)
get.index "playerIdx" ; #main(109)
set.op add ; #main(109)
IF_END_1600001:
load #1 ; #main(112)
get.index "changes" ; #main(112)
ret ; #main(112)
main::onTimeout.1:
call.udf field_changes::NewChangeSet ; #main(90)
store 1 ; #main(90)
load "Выберите сектор" ; #main(91)
load.const null ; #main(91)
load "*" ; #main(91)
load #1 ; #main(91)
get.index "showMessage" ; #main(91)
invoke ; #main(91)
load "stage" ; #main(92)
load "select_sector" ; #main(92)
load #1 ; #main(92)
get.index "changeProperty" ; #main(92)
invoke ; #main(92)
load #1 ; #main(94)
get.index "changes" ; #main(94)
ret ; #main(94)
main::onPlayerEntered.1:
load.global 1 ; #main(81)
get.index "players" ; #main(81)
load #0 ; #main(81)
get.index "playerIdx" ; #main(81)
get ; #main(81)
load 0.0 ; #main(81)
jmpeq IF_C_1600002_1 ; #main(85)
load.const null ; #main(84)
ret ; #main(84)
jmp IF_END_1600002 ; #main(85)
IF_C_1600002_1:
load #0 ; #main(82)
get.index "playerIdx" ; #main(82)
call.udf main::initializePlayer ; #main(82)
get.index "changes" ; #main(82)
ret ; #main(82)
IF_END_1600002:
ret ; #main(86)
main::onStarted.1:
mk_array 0 ; #main(66)
store 1 ; #main(66)
load 0.0 ; #main(68)
load.global 0 ; #main(68)
load 1.0 ; #main(68)
sub ; #main(68)
call.native $builtin::RangeArray ; #main(68)
call.native _iter_create$ ; #main(70)
FOR_COND_1600003:
dup ; #main(70)
call.native _iter_hasnext$ ; #main(70)
load.const true ; #main(70)
jmpne FOR_END_1600003 ; #main(70)
dup ; #main(70)
call.native _iter_next$ ; #main(70)
store 2 ; #main(70)
load #1 ; #main(69)
load "card" ; #main(69)
load #2 ; #main(69)
concat ; #main(69)
call.native $builtin::Add ; #main(69)
jmp FOR_COND_1600003 ; #main(70)
FOR_END_1600003:
unload ; #main(70)
call.udf field_changes::NewChangeSet ; #main(72)
store 3 ; #main(72)
load "card" ; #main(73)
load #1 ; #main(73)
load #3 ; #main(73)
get.index "addDefinitions" ; #main(73)
invoke ; #main(73)
load #3 ; #main(75)
get.index "changes" ; #main(75)
ret ; #main(75)
main::initializePlayer.1:
load 1.0 ; #main(52)
load.global 1 ; #main(52)
get.index "players" ; #main(52)
load #0 ; #main(52)
set ; #main(52)
load "Игрок #" ; #main(54)
load #0 ; #main(54)
concat ; #main(54)
load " присоединился!" ; #main(54)
concat ; #main(54)
store 1 ; #main(54)
load #1 ; #main(56)
load 3.0 ; #main(56)
load "*" ; #main(56)
call.udf field_changes::NewChangeSet ; #main(56)
get.index "showMessage" ; #main(56)
invoke ; #main(56)
store 2 ; #main(56)
load #0 ; #main(57)
load #2 ; #main(57)
call.udf main::givePlayerItems ; #main(57)
load #2 ; #main(60)
ret ; #main(60)
main::givePlayerItems.2:
load "gems_" ; #main(36)
load #0 ; #main(36)
load 1.0 ; #main(36)
add ; #main(36)
concat ; #main(36)
store 2 ; #main(36)
load "gem" ; #main(37)
load #0 ; #main(37)
load 1.0 ; #main(37)
add ; #main(37)
concat ; #main(37)
store 3 ; #main(37)
load "name" ; #main(41)
load "stone1" ; #main(41)
load "group" ; #main(41)
load #2 ; #main(41)
mk_hash 2 ; #main(41)
load "name" ; #main(42)
load "stone2" ; #main(42)
load "group" ; #main(42)
load #2 ; #main(42)
mk_hash 2 ; #main(42)
load "name" ; #main(44)
load #3 ; #main(44)
load "group" ; #main(44)
load #2 ; #main(44)
mk_hash 2 ; #main(44)
mk_array 3 ; #main(45)
store 4 ; #main(45)
load #4 ; #main(47)
load "*" ; #main(47)
load #1 ; #main(47)
get.index "addBatch" ; #main(47)
invoke ; #main(47)
ret ; #main(48)
main::NewCardDeck.0:
load 0.0 ; #main(15)
load.global 0 ; #main(15)
load 1.0 ; #main(15)
sub ; #main(15)
call.native $builtin::RangeArray ; #main(15)
store 0 ; #main(15)
load 0.0 ; #main(17)
load.global 0 ; #main(17)
load 1.0 ; #main(17)
sub ; #main(17)
call.native $builtin::RangeArray ; #main(17)
call.native _iter_create$ ; #main(22)
FOR_COND_1600004:
dup ; #main(22)
call.native _iter_hasnext$ ; #main(22)
load.const true ; #main(22)
jmpne FOR_END_1600004 ; #main(22)
dup ; #main(22)
call.native _iter_next$ ; #main(22)
store 1 ; #main(22)
call.native math::Rand ; #main(18)
load.global 0 ; #main(18)
mul ; #main(18)
call.native math::Int ; #main(18)
store 2 ; #main(18)
load #0 ; #main(19)
load #2 ; #main(19)
get ; #main(19)
store 3 ; #main(19)
load #0 ; #main(20)
load #1 ; #main(20)
get ; #main(20)
load #0 ; #main(20)
load #2 ; #main(20)
set ; #main(20)
load #3 ; #main(21)
load #0 ; #main(21)
load #1 ; #main(21)
set ; #main(21)
jmp FOR_COND_1600004 ; #main(22)
FOR_END_1600004:
unload ; #main(22)
load "cards" ; #main(31)
load #0 ; #main(25)
load "dealOne" ; #main(31)
mk_ref.udf main::$lambda_1 ; #main(30)
mk_hash 2 ; #main(31)
bind_refs ; #main(31)
ret ; #main(31)
main::$lambda_1.1:
load #0 ; #main(27)
get.index "cards" ; #main(27)
get.index 0.0 ; #main(27)
store 1 ; #main(27)
load #0 ; #main(28)
get.index "cards" ; #main(28)
load 0.0 ; #main(28)
call.native $builtin::Delete ; #main(28)
load #1 ; #main(29)
ret ; #main(29)
.entry
load 180.0 ; #main(4)
store 0 ; #main(4)
load "players" ; #main(11)
load.const 0 ; #main(8)
load "started" ; #main(11)
load.const false ; #main(9)
load "deck" ; #main(11)
call.udf main::NewCardDeck ; #main(10)
mk_hash 3 ; #main(11)
store 1 ; #main(11)
load "initialize" ; #main(132)
mk_ref.udf main::onStarted ; #main(127)
load "new_player" ; #main(132)
mk_ref.udf main::onPlayerEntered ; #main(128)
load "timeout" ; #main(132)
mk_ref.udf main::onTimeout ; #main(129)
load "card" ; #main(132)
mk_ref.udf main::onCardRequested ; #main(130)
load "give_object" ; #main(132)
mk_ref.udf main::onGiveObjectToAnother ; #main(131)
mk_hash 5 ; #main(132)
call.native events::MapHandlers ; #main(132)
call.native events::StartLoop ; #main(133)
